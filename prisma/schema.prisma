// This is your Prisma schema file,
// learn more about it in the docs https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading
    // https//next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https//www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// TODO: relaseDate
model Promotion {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    movie     Movie      @relation(fields: [movieId], references: [id])
    title     String
    movieId   String     @db.ObjectId
    code      String     @unique
    discount  Float
}
model Movie { 
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    title     String     @unique
    synopsis  String
    // releaseDate DateTime
    upcoming  Boolean
    rating    String
    genre     String
    showtimes DateTime[]
    poster    String
    trailer   String
    length    String
    cast      String
    directors String
    producers String
    reviews   String[]
    promotion Promotion[]
}

model User {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    email        String   @unique
    firstName    String
    lastName     String
    phoneNumber  String
    password     String
    homeAddress  Address?
    card         Card[]
    order        Order[]
    state        String   @default("ACTIVE")
    confirmed    Boolean
    confirmCode  String
    isAdmin      Boolean  @default(false)
    changePwCode String?
    agreeToPromo Boolean  @default(false)
}

model Address {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    user      User   @relation(fields: [userId], references: [id])
    userId    String @unique @db.ObjectId
    firstName String
    lastName  String
    street    String
    city      String
    state     String
    zip       String
}

model Card {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    user       User   @relation(fields: [userId], references: [id])
    userId     String @db.ObjectId
    cardNumber String @unique
    expMonth   String
    expYear    String
    //billing address
    firstName  String
    lastName   String
    street     String
    city       String
    state      String
    zip        String
}

model Order {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    user        User   @relation(fields: [userId], references: [id])
    userId      String @db.ObjectId
    bookingNo   String @unique
    title       String
    seats       String[]
    aTicket     Int
    cTicket     Int
    sTicket     Int
    promoAmount Int
    total       Int
}
